### Вывод в консоль

plaintext
Боец выбирает sword.
Боец наносит удар мечом.
Монстр осталось 50 здоровья.
Боец выбирает bow.
Боец наносит удар из лука.
Монстр побежден!

### Объяснение

1. **Абстрактный класс `Weapon`**: Создан для того, чтобы установить общую структуру для всех типов оружия. Метод `attack` должен быть реализован в каждом конкретном типе оружия.
2. **Конкретные типы оружия**: Классы `Sword` и `Bow` реализуют метод `attack` по-своему.
3. **Класс `Fighter`**: Имеет поле `weapon` для хранения текущего оружия и метод `changeWeapon` для его смены. Метод `attack` вызывает метод `attack` текущего оружия.
4. **Класс `Monster`**: Представляет монстра с полем `health` и методом `take_damage` для обработки урона.

Эта структура позволяет легко добавлять новые типы оружия, просто создавая новые классы, наследующиеся от `Weapon`, без необходимости изменения кода бойца или механизма боя.


game.py
### Объяснение кода

1. **Создание абстрактного класса для оружия и конкретных типов оружия**: Классы `Weapon`, `Sword` и `Bow` остаются без изменений.
2. **Модификация класса Fighter**: Добавлен метод `changeWeapon` для смены оружия, метод `attack` для атаки и исправлен метод `__init__`.
3. **Создание класса Monster**: Класс `Monster` реализован для обработки урона.
4. **Основная игровая логика**:
   - В цикле создается список монстров, которых нужно победить.
   - Игроку предоставляется выбор оружия и возможность атаковать.
   - Когда здоровье монстра достигает нуля, он считается побежденным, и игра переходит к следующему монстру.
   - Игра завершается, когда все монстры побеждены.

### Запуск игры

- Сохраните код в файл, например, `game.py`.
- Запустите игру командой `python game.py` в терминале или командной строке.

Теперь у вас есть простая текстовая игра, в которой боец сражается с монстрами, используя различные виды оружия.
